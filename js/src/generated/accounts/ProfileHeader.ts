/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { Guardian, guardianBeet } from '../types/Guardian'

/**
 * Arguments used to create {@link ProfileHeader}
 * @category Accounts
 * @category generated
 */
export type ProfileHeaderArgs = {
  authority: web3.PublicKey
  recoveryThreshold: number
  guardians: Guardian[] /* size: 10 */
  privScan: Uint8Array
  privSpend: Uint8Array
  recovery: web3.PublicKey
}
/**
 * Holds the data for the {@link ProfileHeader} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProfileHeader implements ProfileHeaderArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly recoveryThreshold: number,
    readonly guardians: Guardian[] /* size: 10 */,
    readonly privScan: Uint8Array,
    readonly privSpend: Uint8Array,
    readonly recovery: web3.PublicKey
  ) {}

  /**
   * Creates a {@link ProfileHeader} instance from the provided args.
   */
  static fromArgs(args: ProfileHeaderArgs) {
    return new ProfileHeader(
      args.authority,
      args.recoveryThreshold,
      args.guardians,
      args.privScan,
      args.privSpend,
      args.recovery
    )
  }

  /**
   * Deserializes the {@link ProfileHeader} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ProfileHeader, number] {
    return ProfileHeader.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ProfileHeader} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<ProfileHeader> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find ProfileHeader account at ${address}`)
    }
    return ProfileHeader.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '2aJqX3GKRPAsfByeMkL7y9SqAGmCQEnakbuHJBdxGaDL'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, profileHeaderBeet)
  }

  /**
   * Deserializes the {@link ProfileHeader} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ProfileHeader, number] {
    return profileHeaderBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ProfileHeader} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return profileHeaderBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ProfileHeader} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProfileHeaderArgs) {
    const instance = ProfileHeader.fromArgs(args)
    return profileHeaderBeet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ProfileHeader} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProfileHeaderArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ProfileHeader.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link ProfileHeader} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      recoveryThreshold: this.recoveryThreshold,
      guardians: this.guardians,
      privScan: this.privScan,
      privSpend: this.privSpend,
      recovery: this.recovery.toBase58(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const profileHeaderBeet = new beet.FixableBeetStruct<
  ProfileHeader,
  ProfileHeaderArgs
>(
  [
    ['authority', beetSolana.publicKey],
    ['recoveryThreshold', beet.u8],
    ['guardians', beet.uniformFixedSizeArray(guardianBeet, 10)],
    ['privScan', beet.bytes],
    ['privSpend', beet.bytes],
    ['recovery', beetSolana.publicKey],
  ],
  ProfileHeader.fromArgs,
  'ProfileHeader'
)
