/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  TransferNativeSOLArgs,
  transferNativeSOLArgsBeet,
} from '../types/TransferNativeSOLArgs'

/**
 * @category Instructions
 * @category TransferNativeSOL
 * @category generated
 */
export type TransferNativeSOLInstructionArgs = {
  transferNativeSolArgs: TransferNativeSOLArgs
}
/**
 * @category Instructions
 * @category TransferNativeSOL
 * @category generated
 */
export const TransferNativeSOLStruct = new beet.BeetArgsStruct<
  TransferNativeSOLInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['transferNativeSolArgs', transferNativeSOLArgsBeet],
  ],
  'TransferNativeSOLInstructionArgs'
)
/**
 * Accounts required by the _TransferNativeSOL_ instruction
 *
 * @property [_writable_] profileInfo PDA of Krypton Program
 * @property [**signer**] authorityInfo Pubkey of authority keypair of PDA
 * @property [_writable_] destination Destination Pubkey
 * @property [_writable_] guard (optional) PDA of guard account
 * @category Instructions
 * @category TransferNativeSOL
 * @category generated
 */
export type TransferNativeSOLInstructionAccounts = {
  profileInfo: web3.PublicKey
  authorityInfo: web3.PublicKey
  destination: web3.PublicKey
  guard?: web3.PublicKey
}

export const transferNativeSOLInstructionDiscriminator = 2

/**
 * Creates a _TransferNativeSOL_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferNativeSOL
 * @category generated
 */
export function createTransferNativeSOLInstruction(
  accounts: TransferNativeSOLInstructionAccounts,
  args: TransferNativeSOLInstructionArgs,
  programId = new web3.PublicKey('2aJqX3GKRPAsfByeMkL7y9SqAGmCQEnakbuHJBdxGaDL')
) {
  const [data] = TransferNativeSOLStruct.serialize({
    instructionDiscriminator: transferNativeSOLInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.profileInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityInfo,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.guard != null) {
    keys.push({
      pubkey: accounts.guard,
      isWritable: true,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
