/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitializeNativeSolTransferGuardArgs,
  initializeNativeSolTransferGuardArgsBeet,
} from '../types/InitializeNativeSolTransferGuardArgs'

/**
 * @category Instructions
 * @category InitializeNativeSolTransferGuard
 * @category generated
 */
export type InitializeNativeSolTransferGuardInstructionArgs = {
  initializeNativeSolTransferGuardArgs: InitializeNativeSolTransferGuardArgs
}
/**
 * @category Instructions
 * @category InitializeNativeSolTransferGuard
 * @category generated
 */
export const InitializeNativeSolTransferGuardStruct = new beet.BeetArgsStruct<
  InitializeNativeSolTransferGuardInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    [
      'initializeNativeSolTransferGuardArgs',
      initializeNativeSolTransferGuardArgsBeet,
    ],
  ],
  'InitializeNativeSolTransferGuardInstructionArgs'
)
/**
 * Accounts required by the _InitializeNativeSolTransferGuard_ instruction
 *
 * @property [_writable_] profileInfo PDA of Krypton Program to be recovered
 * @property [**signer**] authorityInfo Pubkey of keypair of PDA to be recovered
 * @property [_writable_] guardInfo PDA of the guard account that will be initialized
 * @category Instructions
 * @category InitializeNativeSolTransferGuard
 * @category generated
 */
export type InitializeNativeSolTransferGuardInstructionAccounts = {
  profileInfo: web3.PublicKey
  authorityInfo: web3.PublicKey
  guardInfo: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const initializeNativeSolTransferGuardInstructionDiscriminator = 10

/**
 * Creates a _InitializeNativeSolTransferGuard_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeNativeSolTransferGuard
 * @category generated
 */
export function createInitializeNativeSolTransferGuardInstruction(
  accounts: InitializeNativeSolTransferGuardInstructionAccounts,
  args: InitializeNativeSolTransferGuardInstructionArgs,
  programId = new web3.PublicKey('2aJqX3GKRPAsfByeMkL7y9SqAGmCQEnakbuHJBdxGaDL')
) {
  const [data] = InitializeNativeSolTransferGuardStruct.serialize({
    instructionDiscriminator:
      initializeNativeSolTransferGuardInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.profileInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityInfo,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.guardInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
